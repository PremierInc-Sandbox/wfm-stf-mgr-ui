# WFM STAFF SCHEDULER UI build/deploy cicd
# Add steps that build, run tests, deploy, and more:

pool:
  name: 'Premier Linux Agents'
  demands:
  - SYSTEM_JDK_11

variables:
  IsDevelop: $[eq( variables['Build.SourceBranch'], 'refs/heads/develop' )]
  IsNotPr: ${{ ne( variables['Build.Reason'], 'PullRequest' ) }}
  IsRc: $[contains( variables['Build.SourceBranch'], 'refs/heads/rc' )]
  IsRelease: $[contains( variables['Build.SourceBranch'], 'refs/heads/release' )]
  ArmConnectionNonProd: WFMDevacr-east_SC
  ArmConnectionProd: SC_wfmprdacr

resources:
  repositories:
    - repository: sdlc_templates
      type: github
      name: PremierInc/shield-ado-templates
      endpoint: PremierInc
    - repository: wfm-templates
      type: github
      name: PremierInc/wfm-ado-templates
      endpoint: PremierInc

trigger:
  batch: "true"
  branches:
    include:
      - main
      - develop
      - rc/*
      - release/*

pr:
  autoCancel: "true"
  drafts: "false"
  branches:
    include:
      - develop
      - rc/*
      - release/*

stages:
  - template: aks/ci.yaml@wfm-templates
    parameters:
      Name: StfMgrUICI
      GradleBuildTask: 'prepareRelease'
      GradleBuildEnvironment:
        JAVA_HOME: $(SYSTEM_JDK_11)
        GRADLE_USER_HOME: $(GRADLE_USER_HOME)
      BuildVariables:
        - group: "wfm-ucp-np"
        - group: "wfm-staff-scheduler-ui-dev"
      ArmConnection: $(ArmConnectionNonProd)
      ${{ if eq(variables.IsNotPr, 'true') }}:
      Images:
        - Name: stf-mgr-ui
          ApplicationName: ''
          ContextDirectory: build/dist-bundles/docker/UI
      Charts:
        - Name: stf-mgr-ui
          ContextDirectory: build/dist-bundles/helm-charts/stf-mgr-ui
  - ${{ if eq(variables.IsNotPr, 'true') }}:
  - template: aks/helm-deployment.yaml@wfm-templates
    parameters:
      Name: StfMgrUIDev
      DependsOn: [ 'StfMgrUICI' ]
      DeploymentVariables:
        - group: "wfm-staff-scheduler-ui-dev"
        - group: "wfm-ucp-np"
      Environments:
        - Name: dev
          Target: wfm-staff-scheduler-ui-dev
          EnvironmentName: dev
          KubernetesServiceConnection: WFMwfm-dev-eastus
      ArmConnection: $(ArmConnectionNonProd)
      KubernetesNamespace: wfm-dev
      ReleaseName: wfm-stf-mgr-ui
      ChartRegistry: wfmnpacr
      ChartName: stf-mgr-ui
      ChartUri: oci://wfmnpacr.azurecr.io/premierinc/wfm/ci/helm/stf-mgr-ui
      ChartVersion: $(Build.BuildNumber)
      ChartValues: |
        image.repository=wfmnpacr.azurecr.io/premierinc/wfm/ci/stf-mgr-ui
        image.tag=$(Build.BuildNumber)
  - template: aks/helm-deployment.yaml@wfm-templates
    parameters:
      Name: StfMgrUIQA
      DependsOn: [ 'StfMgrUIDev' ]
      DeploymentVariables:
        - group: "wfm-staff-scheduler-ui-qa"
        - group: "wfm-ucp-np"
      Environments:
        - Name: qa
          Target: wfm-staff-scheduler-ui-qa
          EnvironmentName: qa
          KubernetesServiceConnection: WFMwfm-qa-eastus
      ArmConnection: $(ArmConnectionNonProd)
      KubernetesNamespace: wfm-qa
      ReleaseName: wfm-stf-mgr-ui
      ChartRegistry: wfmnpacr
      ChartName: stf-mgr-ui
      ChartUri: oci://wfmnpacr.azurecr.io/premierinc/wfm/ci/helm/stf-mgr-ui
      ChartVersion: $(Build.BuildNumber)
      ChartValues: |
        image.repository=wfmnpacr.azurecr.io/premierinc/wfm/ci/stf-mgr-ui
        image.tag=$(Build.BuildNumber)
  - template: aks/helm-deployment.yaml@wfm-templates
    parameters:
      Name: StfMgrUIUAT
      Condition: and(succeeded(), or(eq(variables['IsRc'], 'true'), eq(variables['IsRelease'], 'true')), eq(variables['restart_prod'], 'N'))
      DependsOn: [ 'StfMgrUICI' ]
      DeploymentVariables:
       - group: "wfm-staff-scheduler-ui-uat"
       - group: "wfm-ucp-prod"
    Environments:
      - Name: uat
        Target: wfm-staff-scheduler-ui-uat
        EnvironmentName: uat
        KubernetesServiceConnection: WFMwfm-uat-eastus
    ArmConnection: $(ArmConnectionProd)
    KubernetesNamespace: wfm-uat
    ReleaseName: wfm-stf-mgr-ui
    ChartRegistry: wfmprdacr
    ChartName: stf-mgr-ui
    ChartUri: oci://wfmprdacr.azurecr.io/premierinc/wfm/prod/helm/stf-mgr-ui
    ChartVersion: $(Build.BuildNumber)
    ChartValues: |
      image.repository=wfmprdacr.azurecr.io/premierinc/wfm/prod/stf-mgr-ui
      image.tag=$(Build.BuildNumber)
    PreDeploySteps:
      - template: aks/promote-acr-artifact.yaml@wfm-templates
        parameters:
          ArmServiceConnection: $(ArmConnectionProd)
          SourceAcr: wfmnpacr
          SourceRepository: premierinc/wfm/np/ci/docker
          SourceTag: $(Build.BuildNumber)
          TargetAcr: wfmprdacr
          TargetRepository: premierinc/wfm/prod/docker
          TargetTag: $(Build.BuildNumber)
  - template: aks/helm-deployment.yaml@wfm-templates
    parameters:
      Name: StfMgrUIPerf
      Condition: and(succeeded(), or(eq(variables['IsRc'], 'true'), eq(variables['IsRelease'], 'true')), eq(variables['restart_prod'], 'N'))
      DependsOn: [ 'StfMgrUIUAT' ]
      DeploymentVariables:
        - group: "wfm-staff-scheduler-ui-perf"
        - group: "wfm-ucp-prod"
    Environments:
      - Name: perf
        Target: wfm-staff-scheduler-ui-perf
        EnvironmentName: perf
        KubernetesServiceConnection: WFMwfm-perf-eastus
    ArmConnection: $(ArmConnectionProd)
    KubernetesNamespace: wfm-perf
    ReleaseName: wfm-stf-mgr-ui
    ChartRegistry: wfmprdacr
    ChartName: stf-mgr-ui
    ChartUri: oci://wfmprdacr.azurecr.io/premierinc/wfm/prod/helm/stf-mgr-ui
    ChartVersion: $(Build.BuildNumber)
    ChartValues: |
      image.repository=wfmprdacr.azurecr.io/premierinc/wfm/prod/stf-mgr-ui
      image.tag=$(Build.BuildNumber)
  - template: aks/helm-deployment.yaml@wfm-templates
    parameters:
      Name: StfMgrUIProd
      Condition: and(succeeded(), eq(variables['IsRelease'], 'true'), eq(variables['restart_prod'], 'N'))
      DependsOn: [ 'StfMgrUIUAT' ]
      DeploymentVariables:
        - group: "wfm-staff-scheduler-ui-prod"
        - group: "wfm-ucp-prod"
    Environments:
      - Name: prod
        Target: wfm-staff-scheduler-ui-prod
        EnvironmentName: prod
        KubernetesServiceConnection: WFMwfm-prd-eastus
    ArmConnection: $(ArmConnectionProd)
    KubernetesNamespace: wfm-prod
    ReleaseName: wfm-stf-mgr-ui
    ChartRegistry: wfmprdacr
    ChartName: stf-mgr-ui
    ChartUri: oci://wfmprdacr.azurecr.io/premierinc/wfm/prod/helm/stf-mgr-ui
    ChartVersion: $(Build.BuildNumber)
    ChartValues: |
      image.repository=wfmprdacr.azurecr.io/premierinc/wfm/prod/stf-mgr-ui
      image.tag=$(Build.BuildNumber)
  - template: aks/helm-deployment.yaml@wfm-templates
    parameters:
      Name: StfMgrUIProdRestart
      Condition: eq(variables['restart_prod'], 'Y')
      DeploymentVariables:
        - group: "wfm-staff-scheduler-ui-prod"
        - group: "wfm-ucp-prod"
    Environments:
      - Name: prod
        Target: wfm-staff-scheduler-ui-prod
        EnvironmentName: prod
        KubernetesServiceConnection: WFMwfm-prd-eastus
    ArmConnection: $(ArmConnectionProd)
    KubernetesNamespace: wfm-prod
    ReleaseName: wfm-stf-mgr-ui
    ChartRegistry: wfmprdacr
    ChartName: stf-mgr-ui
    ChartUri: oci://wfmprdacr.azurecr.io/premierinc/wfm/prod/helm/stf-mgr-ui
    ChartVersion: $(Build.BuildNumber)
    ChartValues: |
      image.repository=wfmprdacr.azurecr.io/premierinc/wfm/prod/stf-mgr-ui
      image.tag=$(Build.BuildNumber)
#stages:
#- stage: WFMStaffMgrUIBuild
#  jobs:
#  - job: WFMStaffMgrUIBuild
#    variables:
#      - group: "wfm-staff-scheduler-ui-dev"
#      - group: "wfm-ucp-np"
#    steps:
#      - bash: |
#          chmod +x ./gradlew && ./gradlew wrapper --no-daemon
#          ./gradlew --no-daemon prepareRelease \
#          -Pregistry.username=${registry_username} \
#          -Pregistry.password=${registry_password}
#        env:
#          JAVA_HOME: $(SYSTEM_JDK_11)
#          registry_username: $(ucp_username)
#          registry_password: $(ucp_password)
#        displayName: WFMStaffMgrUIBuild
#      - bash: |
#          cat build/git.properties
#          version="$(grep 'git.build.version' build/git.properties | awk -F= '{print $2}')"
#          echo "version is $version"
#          echo "##vso[task.setvariable variable=APP_VERSION;isOutput=true]$version"
#        displayName: extract version
#        name: set_version
#      - task: AzureCLI@2
#        displayName: Build and Publish Image to ACR
#        inputs:
#          azureSubscription: $(ArmConnectionNonProd)
#          scriptType: bash
#          scriptLocation: inlineScript
#          addSpnToEnvironment: true
#          inlineScript: |
#            az acr login -n wfmnpacr
#            docker build -t wfmnpacr.azurecr.io/premierinc/wfm/ci/stf-mgr-ui:$(Build.BuildNumber) build/dist-bundles/docker/UI &&\
#            docker push wfmnpacr.azurecr.io/premierinc/wfm/ci/stf-mgr-ui:$(Build.BuildNumber)
#      - task: HelmInstaller@0
#        displayName: Install Helm
#        inputs:
#          helmVersion: 'latest'
#          installKubectl: false
#      - task: AzureCLI@2
#        displayName: Login to ACR
#        inputs:
#          azureSubscription: $(ArmConnectionNonProd)
#          scriptType: bash
#          scriptLocation: inlineScript
#          addSpnToEnvironment: true
#          inlineScript: |
#            helm registry login wfmnpacr.azurecr.io \
#            --username ${servicePrincipalId} \
#            --password ${servicePrincipalKey}
#      - bash: |
#          helm package build/dist-bundles/helm-charts/stf-mgr-ui --app-version $(Build.BuildNumber) --version $(Build.BuildNumber)
#          helm push stf-mgr-ui-$(Build.BuildNumber).tgz oci://wfmnpacr.azurecr.io/premierinc/wfm/ci/helm/
#        displayName: 'Publish Helm Chart'
#        env:
#          HELM_EXPERIMENTAL_OCI: 1
#  - job: BlackduckScan
#    dependsOn: ['WFMStaffMgrUIBuild']
#    displayName: Blackduck Scan
#    variables:
#      - group: 'SDLC Credentials'
#      - name: APP_VERSION
#        value: $[ stageDependencies.WFMStaffMgrUIBuild.WFMStaffMgrUIBuild.outputs['set_version.APP_VERSION'] ]
#    steps:
#    - bash: chmod +x ./gradlew
#    - template: blackduck-scan.yml@sdlc_templates
#      parameters:
#        BLACKDUCK_API_TOKEN: $(BLACKDUCK_API_TOKEN)
#        BRANCH_SCAN_LIST: "develop"
#        DISTRIBUTION: "SAAS"
#        PROJECT_NAME: "pcops:pco-staff-scheduler-ui"
#        SOURCE_PATH: "$(Build.SourcesDirectory)"
#        PROJECT_VERSION: "$(APP_VERSION)"
#        TEAM: "PCOPS"
#- stage: wfm_stf_mgr_ui_np_promotion
#  displayName: Promote CI Artifacts to Non-Prod ACR
#  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
#  dependsOn: [ 'WFMStaffMgrUIBuild' ]
#  jobs:
#    - job: wfm_stf_mgr_ui_np_promotion
#      displayName: Promote CI Image to Non-Prod ACR
#      steps:
#        - template: ./pipelines/templates/image_promotion.yaml
#          parameters:
#            ArmServiceConnection: WFMDevacr-east_SC
#            SourceAcr: wfmnpacr
#            SourceRepository: premierinc/wfm/ci/stf-mgr-ui
#            SourceTag: $(Build.BuildNumber)
#            TargetAcr: wfmnpacr
#            TargetRepository: premierinc/wfm/np/stf-mgr-ui
#            TargetTag: $(Build.BuildNumber)
#    - job: wfm_stf_mgr_ui_np_helm_promotion
#      displayName: Promote CI Helm to Non-Prod ACR
#      steps:
#        - template: ./pipelines/templates/image_promotion.yaml
#          parameters:
#            ArmServiceConnection: WFMDevacr-east_SC
#            SourceAcr: wfmnpacr
#            SourceRepository: premierinc/wfm/ci/helm/stf-mgr-ui
#            SourceTag: $(Build.BuildNumber)
#            TargetAcr: wfmnpacr
#            TargetRepository: premierinc/wfm/np/helm/stf-mgr-ui
#            TargetTag: $(Build.BuildNumber)
#- template: ./pipelines/helm_deployment.yaml
#  parameters:
#    DependsOn: [ 'WFMStaffMgrUIBuild', 'wfm_stf_mgr_ui_np_promotion' ]
#    TargetEnvironment: wfm-staff-scheduler-ui-dev
#    Environment: dev
#    RunIf: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
#    ArmConnection: $(ArmConnectionNonProd)
#    DeploymentVariables:
#      - group: "wfm-staff-scheduler-ui-dev"
#      - group: "wfm-ucp-np"
#      - name: AcrRegistryName
#        value: wfmnpacr
#      - name: AcrImageRepository
#        value: premierinc/wfm/np
#      - name: ArmConnection
#        value: WFMDevacr-east_SC
#      - name: HelmRepository
#        value: premierinc/wfm/np/helm
#- stage: 'DEV_DEPLOY'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
#  dependsOn: ['WFMStaffMgrUIBuild']
#  jobs:
#  - deployment: DEV_DEPLOY
#    environment: wfm-staff-scheduler-ui-dev
#    variables:
#      - group: "wfm-staff-scheduler-ui-dev"
#      - group: "wfm-ucp-np"
#      - name: APP_VERSION
#        value: $[ stageDependencies.WFMStaffMgrUIBuild.WFMStaffMgrUIBuild.outputs['set_version.APP_VERSION'] ]
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - bash: |
#              echo project_version=$APP_VERSION
#              AUTHTOKEN=$(curl -sk -d '{"username":"'${ucp_username}'", "password":"'${ucp_password}'"}' https://${ucp_domain}/auth/login | jq -r .auth_token)
#              curl -k -H "Authorization: Bearer $AUTHTOKEN" https://${ucp_domain}/api/clientbundle -o bundle.zip
#              unzip bundle.zip
#              eval "$(<env.sh)"
#              docker login -u ${ucp_username} -p ${ucp_password} ${registry_domain}
#              docker-compose -f pco-staff-scheduler-ui-stack.yml config
#              ls -la
#              docker --host ${ucp_domain}:443 stack deploy -c pco-staff-scheduler-ui-stack.yml --with-registry-auth ${stack_name}
#            env:
#              JAVA_HOME: $(SYSTEM_JDK_11)
#              registry_domain: $(registry_domain)
#              registry_username: $(ucp_username)
#              registry_password: $(ucp_password)
#              ucp_domain: $(ucp_domain)
#              ucp_username: $(ucp_username)
#              ucp_password: $(ucp_password)
#              stack_file: $(stack_file)
#              stack_name: $(stack_name)
#              env: $(env)
#              registry_image: $(registry_image)
#              APP_VERSION: $(APP_VERSION)
#              active_profiles: $(active_profiles)
#              network_pcops: $(network_pcops)
#              jvm_options: $(jvm_options)
#              traefik_ntwk: $(traefik_ntwk)
#            workingDirectory: $(Pipeline.Workspace)/wfm_artifacts
#            displayName: DEV DEPLOY
#
#- stage: 'QA_DEPLOY'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
#  dependsOn: ['WFMStaffMgrUIBuild']
#  jobs:
#  - deployment: QA_DEPLOY
#    environment: wfm-staff-scheduler-ui-qa
#    variables:
#      - group: "wfm-staff-scheduler-ui-qa"
#      - group: "wfm-ucp-np"
#      - name: APP_VERSION
#        value: $[ stageDependencies.WFMStaffMgrUIBuild.WFMStaffMgrUIBuild.outputs['set_version.APP_VERSION'] ]
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - bash: |
#              echo project_version=$APP_VERSION
#              AUTHTOKEN=$(curl -sk -d '{"username":"'${ucp_username}'", "password":"'${ucp_password}'"}' https://${ucp_domain}/auth/login | jq -r .auth_token)
#              curl -k -H "Authorization: Bearer $AUTHTOKEN" https://${ucp_domain}/api/clientbundle -o bundle.zip
#              unzip bundle.zip
#              eval "$(<env.sh)"
#              docker login -u ${ucp_username} -p ${ucp_password} ${registry_domain}
#              docker-compose -f pco-staff-scheduler-ui-stack.yml config
#              ls -la
#              docker --host ${ucp_domain}:443 stack deploy -c pco-staff-scheduler-ui-stack.yml --with-registry-auth ${stack_name}
#            env:
#              JAVA_HOME: $(SYSTEM_JDK_11)
#              registry_domain: $(registry_domain)
#              registry_username: $(ucp_username)
#              registry_password: $(ucp_password)
#              ucp_domain: $(ucp_domain)
#              ucp_username: $(ucp_username)
#              ucp_password: $(ucp_password)
#              stack_file: $(stack_file)
#              stack_name: $(stack_name)
#              env: $(env)
#              registry_image: $(registry_image)
#              APP_VERSION: $(APP_VERSION)
#              active_profiles: $(active_profiles)
#              network_pcops: $(network_pcops)
#              jvm_options: $(jvm_options)
#              traefik_ntwk: $(traefik_ntwk)
#            workingDirectory: $(Pipeline.Workspace)/wfm_artifacts
#            displayName: QA DEPLOY
#
#- stage: 'UAT_DEPLOY'
#  condition: or(eq(variables['isrc'], 'true'), eq(variables['isRelease'], 'true'))
#  dependsOn: ['WFMStaffMgrUIBuild']
#  jobs:
#  - deployment: UAT_DEPLOY
#    environment: wfm-staff-scheduler-ui-uat
#    variables:
#      - group: "wfm-staff-scheduler-ui-uat"
#      - group: "wfm-ucp-prod"
#      - name: APP_VERSION
#        value: $[ stageDependencies.WFMStaffMgrUIBuild.WFMStaffMgrUIBuild.outputs['set_version.APP_VERSION'] ]
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - bash: |
#              echo project_version=$APP_VERSION
#              AUTHTOKEN=$(curl -sk -d '{"username":"'${ucp_username}'", "password":"'${ucp_password}'"}' https://${ucp_domain}/auth/login | jq -r .auth_token)
#              curl -k -H "Authorization: Bearer $AUTHTOKEN" https://${ucp_domain}/api/clientbundle -o bundle.zip
#              unzip bundle.zip
#              eval "$(<env.sh)"
#              docker login -u ${ucp_username} -p ${ucp_password} ${registry_domain}
#              docker-compose -f pco-staff-scheduler-ui-stack.yml config
#              ls -la
#              docker --host ${ucp_domain}:443 stack deploy -c pco-staff-scheduler-ui-stack.yml --with-registry-auth ${stack_name}
#            env:
#              JAVA_HOME: $(SYSTEM_JDK_11)
#              registry_domain: $(registry_domain)
#              registry_username: $(ucp_username)
#              registry_password: $(ucp_password)
#              ucp_domain: $(ucp_domain)
#              ucp_username: $(ucp_username)
#              ucp_password: $(ucp_password)
#              stack_file: $(stack_file)
#              stack_name: $(stack_name)
#              env: $(env)
#              registry_image: $(registry_image)
#              APP_VERSION: $(APP_VERSION)
#              active_profiles: $(active_profiles)
#              network_pcops: $(network_pcops)
#              jvm_options: $(jvm_options)
#              traefik_ntwk: $(traefik_ntwk)
#            workingDirectory: $(Pipeline.Workspace)/wfm_artifacts
#            displayName: UAT DEPLOY
#
#- stage: 'PERF_DEPLOY'
#  condition: or(eq(variables['isrc'], 'true'), eq(variables['isRelease'], 'true'))
#  dependsOn: ['WFMStaffMgrUIBuild']
#  jobs:
#  - deployment: PERF_DEPLOY
#    environment: wfm-staff-scheduler-ui-perf
#    variables:
#      - group: "wfm-staff-scheduler-ui-perf"
#      - group: "wfm-ucp-prod"
#      - name: APP_VERSION
#        value: $[ stageDependencies.WFMStaffMgrUIBuild.WFMStaffMgrUIBuild.outputs['set_version.APP_VERSION'] ]
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - bash: |
#              echo project_version=$APP_VERSION
#              AUTHTOKEN=$(curl -sk -d '{"username":"'${ucp_username}'", "password":"'${ucp_password}'"}' https://${ucp_domain}/auth/login | jq -r .auth_token)
#              curl -k -H "Authorization: Bearer $AUTHTOKEN" https://${ucp_domain}/api/clientbundle -o bundle.zip
#              unzip bundle.zip
#              eval "$(<env.sh)"
#              docker login -u ${ucp_username} -p ${ucp_password} ${registry_domain}
#              docker-compose -f pco-staff-scheduler-ui-stack.yml config
#              ls -la
#              docker --host ${ucp_domain}:443 stack deploy -c pco-staff-scheduler-ui-stack.yml --with-registry-auth ${stack_name}
#            env:
#              JAVA_HOME: $(SYSTEM_JDK_11)
#              registry_domain: $(registry_domain)
#              registry_username: $(ucp_username)
#              registry_password: $(ucp_password)
#              ucp_domain: $(ucp_domain)
#              ucp_username: $(ucp_username)
#              ucp_password: $(ucp_password)
#              stack_file: $(stack_file)
#              stack_name: $(stack_name)
#              env: $(env)
#              registry_image: $(registry_image)
#              APP_VERSION: $(APP_VERSION)
#              active_profiles: $(active_profiles)
#              network_pcops: $(network_pcops)
#              jvm_options: $(jvm_options)
#              traefik_ntwk: $(traefik_ntwk)
#            workingDirectory: $(Pipeline.Workspace)/wfm_artifacts
#            displayName: PERF DEPLOY
#
#- stage: 'PROD_DEPLOY'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
#  dependsOn: ['WFMStaffMgrUIBuild']
#  jobs:
#  - deployment: PROD_DEPLOY
#    environment: wfm-staff-scheduler-ui-prod
#    variables:
#      - group: "wfm-staff-scheduler-ui-prod"
#      - group: "wfm-ucp-prod"
#      - name: APP_VERSION
#        value: $[ stageDependencies.WFMStaffMgrUIBuild.WFMStaffMgrUIBuild.outputs['set_version.APP_VERSION'] ]
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - bash: |
#              AUTHTOKEN=$(curl -sk -d '{"username":"'${ucp_username}'", "password":"'${ucp_password}'"}' https://${ucp_domain}/auth/login | jq -r .auth_token)
#              curl -k -H "Authorization: Bearer $AUTHTOKEN" https://${ucp_domain}/api/clientbundle -o bundle.zip
#              unzip bundle.zip
#              eval "$(<env.sh)"
#              docker login -u ${ucp_username} -p ${ucp_password} ${registry_domain}
#              docker-compose -f pco-staff-scheduler-ui-stack.yml config
#              ls -la
#              docker --host ${ucp_domain}:443 stack deploy -c pco-staff-scheduler-ui-stack.yml --with-registry-auth ${stack_name}
#            env:
#              JAVA_HOME: $(SYSTEM_JDK_11)
#              registry_domain: $(registry_domain)
#              registry_username: $(ucp_username)
#              registry_password: $(ucp_password)
#              ucp_domain: $(ucp_domain)
#              ucp_username: $(ucp_username)
#              ucp_password: $(ucp_password)
#              stack_file: $(stack_file)
#              stack_name: $(stack_name)
#              env: $(env)
#              registry_image: $(registry_image)
#              APP_VERSION: $(APP_VERSION)
#              active_profiles: $(active_profiles)
#              network_pcops: $(network_pcops)
#              jvm_options: $(jvm_options)
#              traefik_ntwk: $(traefik_ntwk)
#            workingDirectory: $(Pipeline.Workspace)/wfm_artifacts
#            displayName: PROD DEPLOY
